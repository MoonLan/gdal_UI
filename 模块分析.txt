2016-5-12
1. 打开后最大化。
2. 历史、分析、无人机按钮缩小后排放。
3. 右边参数，表格，2个图标。


无人机界面：
	视频存储是按照：1，河流ID。2，时间年月日，每日存储一次。3。编号
	用户播放视频，不从文件夹取。而是按照时间，比如（2015年10月1日-2015年10月2日），选择太湖。



显示遥感图像：
 	1，确认河流————》RiverID
 	2. 确认时间————》TIME
 	3. 确认遥感————》MAPID
 	4. 系统获取文件路径或图像矩阵 ————》预留显示部分接口，显示。
 	5. 显示图片平铺到窗口。
 	**6. 训练好模型后，训练之前 遥感地图为观测站点对应的数据，训练之后为整个河流对应的数据。
 	按照颜色深浅进行分布。

显示水质数据和图表：
	1，确认河流————》RiverID
 	2. 确认时间————》TIME
 	3. 确认遥感————》MAPID
 	4. 太湖有5个观测站 ————》ObId ————》5个经纬度
 	5. 经纬度 ————》一次sql 语句取pandas表 
	 	1. 画图 seaborn python base on matplolib 
	 	2， 4个折线图根据用户选择，画在一个表上，纵坐标为’水质数据‘折算到100
	 	横坐标为’时间‘，一次显示一个观测站。
	 	3  柱状图横坐标为’水质ID‘，柱状图分布为’观测站‘或’不同河流‘，限制一次性对比3个河流。
	6，用户选择对比不同河流 --》切换界面
		1. 选择对比的河流，时间。
		2. 显示相应折线图和柱状图

播放视频
	1，确认河流————》RiverID
 	2. 确认时间————》TIME
 	3. 选择播放的时间段，返回播放列表
 	4. 播放视频，或选择观看实时无人机画面
 	**5 操作无人机或无人船界面

分析
	1. 选择文件夹，返回所有tif列表
	2. 处理tif文件，返回处理后水体图片和彩色RGB图片
	3. 插入数据到数据库。

2016-5-14
程序结构
gdal_UI
-data #存放数据
 	--water.db #数据库文件
-code #存放代码
	--model #每个模块的头文件代码
		--- 遥感图像模块.py
		--- 图像分析模块.py
		--- 水质数据模块.py
		--- 无人机模块.py
		--- 用户登陆模块.py
 	--function #子功能函数
 		--- 数据库操作.py
 		--- 遥感图像读取.py
 		--- pandas操作.py
 		--- 经纬度坐标操作.py
 		--- 水质数据操作.py
 		--- md5加密.py
 		--- 视频录像操作.py
 	--ui #UI框架
		---框架

2016-5-16

-data #存放数据
 	--water.db #数据库文件
-code #存放代码
	--controller #每个模块的头文件代码
		--- 遥感图像模块.py
		--- 图像分析模块.py
		--- 水质数据模块.py
		--- 无人机模块.py
		--- 用户登陆模块.py
 	--model #子功能函数
 		--- 数据库操作.py
 		--- 遥感图像读取.py
 		--- pandas操作.py
 		--- 经纬度坐标操作.py
 		--- 水质数据操作.py
 		--- md5加密.py
 		--- 视频录像操作.py
 	--view #UI框架
		---框架

遥感图像模块.py
	读取当前时间，回退到1991年，自动返回生成年-月的可选择列表框。
	创建新的放大缩小图像函数，对读取的图片进行自适应缩放，输入图片路径和窗体大小，根据放大缩小按钮返回比例的image矩阵。
	放大缩小功能绑定到滚轮
水质数据模块.py
	从数据库读取pandas表，index和cols显示。

2016-5-17
数据库结构：
实体：
	河流：RiverId，Name
	遥感地图：MapId,Time,Path,RGBImage,RiverImage
	观测站：ObStationId,StationLongtitude,StationLatitude
	视频：VedioId = RiverId+Time,Time,Path
	水质 :WaterQualityId=MapId+ObStationId,Time,WaterQuality
	用户: UserId,Password,Authority
关系表：
	河流---地图：RiverId--MapId
	地图---观测站： MapId，Time--ObStationId
	河流---视频： RiverId，Time -- VedioId
	观测站---水质： ObStationId--WaterQualityId
	

2016-5-19
	history.UI.label4显示遥感图像。
		TODO:
			1、修改图像的分辨率，设计一个showImage类对图像进行缩放，该类的主要功能是，接受用户选择的mapid，创建一个QImage的类从数据库读取相应图片路径。读取图片后，根据用户滚轮选择的放大、缩小倍数，以及窗口分辨率进行缩放，返回该QImage。
			 2、history模块中，创建pixmap = QPixmap.fromImage(Qimage)，然后UI.label4.setPixmap(pixmap)即可。
			 3、UI.label4的窗口高度固定，宽度适应图片的长宽比，窗口分辨率需要被showImage类读取。
		TODO:
			问题： Qt 中所有界面都是在 UI 线程中（也被称为主线程),生成界面时，各窗体状态是show之前的形状，比如800*600。在生成后，窗体被拉伸到1920*1020，这时需要读取当前的窗体分辨率。现在的做法是在生成时读取分辨率，于是只能读到800*600.无法读取到1920*1080的状态。
			Pyqt多线程，主线程生成UI，其他线程操作图片更新、图表的更新。
	information.py 
		TODO:创建一个类，该类的功能是从数据库获取水质表，
	        然后根据水质表具体内容，循环建立表格的行、列。
	        循环内增加文字居中的代码
	        Item.setTextAlignment(Qt.AlignHCenter |  Qt.AlignVCenter)

 qtdemos 里的demo有个电子地图的样例。OPenStreetMap,Mapcatcher


2016-5-22
	TODO:pandas DataFrame 画折线图、曲线图。




